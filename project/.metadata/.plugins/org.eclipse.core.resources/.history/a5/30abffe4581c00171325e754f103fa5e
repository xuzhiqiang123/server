package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.listener.ConnectListener;
import com.corundumstudio.socketio.listener.DisconnectListener;

import util.ThreadManager;

public class ServerSocketListener implements ServletContextListener{
	
	private ServerSocket server;
	private int socketPort = 8233;
	private String socketIOHost = "192.168.121.115";
	private int socketIOPort = 30002;
	
	private boolean connect = true;//�Ƿ�����Ӳ��

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
		System.out.println("ServerSocketListener---contextDestroyed");
		if (server != null)
        {
			try {
				connect = false;
				server.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
        }
	}

	@Override
	public void contextInitialized(ServletContextEvent arg0) {
		System.out.println("ServerSocketListener---contextInitialized");
		startServerSocketListener();
		startSocketPushListener();
	}
	
	private void startSocketPushListener(){
		ThreadManager.getLongPool().execute(new Runnable() {
			
			@Override
			public void run() {
				System.out.println("ClientSocketIOListener...start...");
				Configuration configuration = new Configuration();
				configuration.setHostname(socketIOHost);
				configuration.setPort(socketIOPort);
				SocketIOServer server = new SocketIOServer(configuration);
		        server.start();
		        server.addConnectListener(new ConnectListener() {
					
					@Override
					public void onConnect(SocketIOClient client) {
						System.out.println("connect a socketio client!!!");
						ClientPushSocket.addClient(client);
					}
				});
		        server.addDisconnectListener(new DisconnectListener() {
					
					@Override
					public void onDisconnect(SocketIOClient client) {
						System.out.println("disconnect a socketio client!!!");
						ClientPushSocket.removeClient(client);
					}
				});
			}
		});
	}

	private void startServerSocketListener() {
		ThreadManager.getShortPool().execute(new Runnable() {
			@Override
			public void run() {
				while(true){
					if(connect){
						try {
							if (server == null) {
								server = new ServerSocket(socketPort);
							}
							System.out.println("server is preparing receive a socket...");
							Socket socket = server.accept();
							ClientSocket.addSocket(socket);
						} catch (IOException e) {
							e.printStackTrace();
						}
					}else{
						break;
					}
				}
			}
		});
	}

}
